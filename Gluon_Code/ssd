from mxnet import gluon
from mxnet import nd
from mxnet import image
from mxnet.contrib.ndarray import MultiBoxPrior
from mxnet.gluon import nn
import matplotlib as mpl
mpl.rcParams['figure.dpi'] = 120
import matplotlib.pyplot as plt


root_url = ('https://apache-mxnet.s3-accelerate.amazonaws.com/'
            'gluon/dataset/pikachu/')
data_dir = '../data/pikachu/'

dataset = {'train.rec': 'e6bcb6ffba1ac04ff8a9b1115e650af56ee969c8',
           'train.idx': 'dcf7318b2602c06428b9988470c731621716c393',
           'val.rec': 'd6c33f799b4d058e82f2cb5bd9a976f69d72d520'}

colors = ['blue', 'green', 'red', 'black', 'magenta']

def download_pikachu():

    for k, v in dataset.items():
        gluon.utils.download(root_url + k, data_dir + k, sha1_hash=v)

def get_iterator(data_shape, batch_size):
    class_names = ['pikachu']
    num_class = len(class_names)
    train_iter = image.ImageDetIter(
        batch_size=batch_size,
        data_shape=(3, data_shape, data_shape),
        path_imgrec=data_dir + 'train.rec',
        path_imgidx=data_dir + 'train.idx',
        shuffle=True,
        mean=True,
        rand_crop=1,
        min_object_covered=0.95,
        max_attempts=200
    )
    val_iter = image.ImageDetIter(
        batch_size=batch_size,
        data_shape=(3, data_shape, data_shape),
        path_imgrec=data_dir + 'val.rec',
        shuffle=False,
        mean=True
    )
    return train_iter, val_iter, class_names, num_class

batch_size = 32
data_shape = 256
rgb_mean = nd.array([123, 117, 104])
train_data, test_data, class_names, num_class = get_iterator(data_shape, batch_size)

batch = train_data.next()
print(batch)

def box_to_rect(box, color, linewidth=3):
    box = box.asnumpy()
    return plt.Rectangle(
        (box[0], box[1]), box[2] - box[0],  box[3] - box[1],
        fill=False, edgecolor=color, linewidth=linewidth
    )

def show_pikachu():
    _, figs = plt.subplots(3, 3, figsize=(6,6))

    for i in range(3):
        for j in range(3):
            img, labels = batch.data[0][3 * i + j], batch.label[0][3 * i + j]
            img = img.transpose((1, 2, 0)) + rgb_mean
            img = img.clip(0, 255).asnumpy()/ 255
            fig = figs[i][j]
            fig.imshow(img)
            for label in labels:
                rect = box_to_rect(label[1:5] * data_shape, 'red', 2)
                fig.add_patch(rect)
            fig.axes.get_xaxis().set_visible(False)
            fig.axes.get_yaxis().set_visible(False)

    plt.show()


def show_box():
    n = 40

    x = nd.random.normal(shape=(1, 3, n, n))

    y = MultiBoxPrior(x, sizes=[.5, .25, .1], ratios=[1, 2, .5])
    print('shape of y ', y.shape)
    boxes = y.reshape((n, n, -1, 4))

    print(boxes.shape)

    print(boxes[20, 20, 0, :])

    plt.imshow(nd.ones((n, n, 3)).asnumpy())

    anchors = boxes[0, 0, :, :]

    for i in range(anchors.shape[0]):
        plt.gca().add_patch(box_to_rect(anchors[i, :] * n, colors[i]))

    plt.show()

def predict_box(num_anchors):
    return nn.Conv2D(num_anchors * 4, kernel_size=3, padding=1, strides=1)

net = predict_box(5)

x = nd.random.normal(shape=(1, 3, 4, 4))

net.initialize()
y = net(x)
print(y.shape)

# show_box()
